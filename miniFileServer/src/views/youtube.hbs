<div id="containerForm">
    <div id="div_search">
        <input id="search_field" name="palavra" placeholder="Pesquise ou cole o link">
        <button id="btnCommand">Pesquisar</button>
    </div>

    <div class="div_itens">
        <div class="columnA">
            <div id="divImg">
                <img src="https://i.ytimg.com/vi/W8dWDjwkMDw/hqdefault.jpg">
                <label>Nome da Música</label>
            </div>
            <div class="div_lista">
                <div id="div_listmusic" class="div_list_itens">
                    {{!-- lista de itens --}}
                </div>
            </div>
        </div>
        <div class="columnB">
            <label>Histórico</label>
            <div class="div_lista">
                <div id="div_history" class="div_list_itens">
                    {{!-- lista de itens --}}
                </div>
            </div>
        </div>
    </div>

    <div class="div_dialog_section">
        <div id="div_playpause" class="div_download">
        </div>

        <div id="divTrackAudio">
            <label id="dialog-title">Nenhuma Música Tocando</label>
            <div>
                <input id="trackAudio" type="range" min="0" max="1" step="any">
                <label id="labelDuration">00:00</label>
                <input id="trackVolume" type="range" min="0" max="1" step="any">
            </div>
        </div>

        <div id="div_download_cur_audio" class="div_download">
        </div>
    </div>
</div>


<view id="progress" style="position: absolute; bottom: 0; width: 100%; display: none; align-items: center; flex-direction: column;">
    <label>Carregando...</label>
    <progress value="0" max="100" style="width: 100%;"></progress>
</view>

<audio controls name="media" preload="none"></audio>

<script defer>
    var rotaApi = "/api/youtube"

    //cria os estados do cliente
    const state = {
        video: {
            id: null,
            title: null
        },
        videolist: null,
        nextlist: null,
        previousVideo: null,
        urlBlob: null
    }

    // ---------------------------------------------------------------------------------- funções uteis

    //verifica se uma string é um link do youtube
    function isVideoURL(frase) {
        return frase.includes("youtube.com/watch?v=") || frase.match(/^.+youtu\.be\/.+$/)
    }

    //dado um link do youtube, retorna o se ID
    function getVideoId(url) {
        let lookFor = url.includes("watch?v=") ? "watch?v=" : "youtu.be/"
        let indexInit = url.indexOf(lookFor) + lookFor.length
        let indexEnd = url.length

        if (url.includes("&list=")) {
            lookFor = "&list="
            indexEnd = url.indexOf(lookFor)
        }

        return url.slice(indexInit, indexEnd)
    }

    //converte segundos em hh:mm:ss
    function convertIntToDuration(duration) {
        let hrs = Math.floor(duration / 3600.0)
        let mim = Math.floor((duration % 3600.0) / 60)
        let seg = Math.floor((duration % 3600.0) % 60)

        mim = mim >= 10 ? mim.toString() : '0' + mim.toString()
        seg = seg >= 10 ? seg.toString() : '0' + seg.toString()

        if (hrs == 0) return `${mim}:${seg}`;

        hrs = hrs >= 10 ? hrs.toString() : '0' + hrs.toString()

        return `${hrs}:${mim}:${seg}`
    }

    function showProgress() {
        $("#progress").css("display", "flex")
        $("#progress progress").val(50)
    }

    function hideProgress() {
        $("#progress").css("display", "none")
    }

    function downloadAudiojQuery(url) {
        return new Promise((resolve, reject) => {
            showProgress()

            $.ajax({
                url: url,
                method: "GET",
                xhr: function () {
                    let xhr = new window.XMLHttpRequest();

                    xhr.addEventListener("progress", function (e) {
                        if (e.lengthComputable && e.total > 0)
                            $("#progress progress").val((100 * e.loaded) / e.total)
                    }, false);

                    return xhr;
                },
                xhrFields: {
                    responseType: 'blob'
                }
            }).done((data) => {
                const blob = data;
                if (!blob) reject("blob vazio")

                resolve(blob)
            }).fail((error) => {
                reject(error)
            }).always(() => {
                hideProgress()
            })
        })
    }

    //realiza uma requisição para obter a imagem de fundo do audio atual
    function changeBackground() {
        const body = document.querySelector('body')

        $.ajax({
            url: `${rotaApi}/details/${state.video.id}`,
            type: "GET",
            success: function (data) {
                body.style.background = `url('${ data.img }')`
            },
            error: function (data) {
                body.style.backgroundColor = "#fff"
            },
        })
    }

    //abre o dialogo mostrando o link do vídeo e a opção de download
    function mkQuestion(id, urlFromAudio=false) {
        makeQuestion({
            title: `${location.origin}/youtube/${id}`,
            ok: {
                title: "Baixar",
                onPress: () => {
                    if (!urlFromAudio) return location.href = `${rotaApi}/get/${id}`;

                    let na = document.createElement("a")
                    na.download = `${$("#dialog-title").html()}.mp3`
                    na.href = $("audio").attr("src")
                    na.click()
                }
            }
        })
    }

    //botão utilizado para baixar o audio que está sendo reproduzido
    function addDownloadAction() {
        if (!state.video.id) return;

        $("#div_download_cur_audio").off('click').click(() => {
            mkQuestion(state.video.id, true)
        })
    }

    //Carrega uma música para ser tocada
    function loadMusic() {
        //limpar audio antigo
        if (state.urlBlob !== null) {
            URL.revokeObjectURL(state.urlBlob)
        }
        
        //Preparar o Audio
        const audio = document.querySelector("audio")
        audio.pause()

        downloadAudiojQuery(`${window.location.origin}/api/youtube/get/${state.video.id}`)
            .then((data) => {
                state.urlBlob = URL.createObjectURL(data);
                audio.src = state.urlBlob;
                audio.load()
                audio.play()
                console.log(state.urlBlob)
            }).catch((error) => {
                console.log(error)
                alert("Erro desconhecido")
            })
        
        document.querySelector("#dialog-title").textContent = state.video.title
        document.querySelector("head title").text = state.video.title

        //Mudar Background
        changeBackground()

        //Atualizar Botão Download
        addDownloadAction()

        //Buscar Semelhantes
        makeRequestSimilar()
    }

    //volta uma música
    function previousMusic() {
        if (state.previousVideo === null) return;

        //salvar anterior
        const currentVideo = state.video
        state.video = state.previousVideo
        state.previousVideo = currentVideo
        loadMusic()
    }

    //avança para a próxima música, evitando músicas grandes (maiores que 12 minutos)
    //aqui é realizado um sorteio entre as cinco músicas do topo da lista que sejam menores que 12 minutos
    function nextMusic() {
        if (state.nextlist !== null && state.nextlist.length > 0) {
            let lista = state.nextlist.filter(({ duration: v }) => {
                return v[0] < 1 && v[1] < 12;
            })
            
            //caso não tenha músicas pequenas, sorteia com as que tem
            if (lista.length == 0) lista = state.nextlist;

            const tam = Math.min(lista.length, 5)
            const aleatorio = Math.floor(Math.random() * tam) % tam

            const { itr } = lista.at(aleatorio)

            //salvar anterior
            state.previousVideo = state.video

            //próximo
            state.video = state.videolist.at(itr)
            loadMusic()
        } else if (state.videolist !== null && state.videolist.length > 0) {
            const tam = Math.min(state.videolist.length, 5)
            const aleatorio = Math.floor(Math.random() * tam) % tam

            //salvar anterior
            state.previousVideo = state.video

            //próximo
            state.video = state.videolist[aleatorio]
            loadMusic()
        }
    }

    //adiciona um item a lista de músicas
    function addVideoButton(video) {
        const divPai = document.getElementById("div_listmusic")

        //adiciona o container
        const mydiv = document.createElement("div")
        mydiv.id = video.id
        mydiv.className = "div_row"

        //adiciona a imagem do vídeo
        const divimg = document.createElement("div")
        divimg.className = "div_img"
        
        //adiciona o titulo que é um botão
        const mybutton = document.createElement("button")
        mybutton.textContent = video.title
        mybutton.type = "button"
        mybutton.className = "back_gray"

        //adiciona a duração da música
        const divTime = document.createElement("div")
        divTime.className = "div_duration back_gray"

        const labelDuration = document.createElement("label")
        labelDuration.textContent = "..."

        divTime.appendChild(labelDuration)

        //adiciona o botão de download
        const divDownload = document.createElement("div")
        divDownload.className = "div_download back_gray"
        divDownload.onclick = () => mkQuestion(video.id)
        
        //aninha todos os itens
        mydiv.appendChild(divimg)
        mydiv.appendChild(mybutton)
        mydiv.appendChild(divTime)
        mydiv.appendChild(divDownload)
        divPai.appendChild(mydiv)

        //tirar depois
        document.getElementById("div_history").appendChild(mydiv.cloneNode(true))

        //cria o evento de click do botão do titulo
        mybutton.addEventListener("click", () => {
            state.video = video
            loadMusic()
        })
    }

    //essa função auxilia a função 'updateDetails' recebendo os dados e atualizando na página
    function onSuccesUpdateDetails(data, itr) {
        //atualiza a lista de músicas
        state.nextlist.push({
            itr: itr,
            duration: data.duration
        })

        //dada uma duração como: [h, m, s] transforma em: ["hh"?, "mm", "ss"]
        let duration = data.duration.map((v, idx) => {
            if (idx == 0 && v < 1) return ''

            let nv = v.toString()
            return nv.length == 1 ? '0' + nv : nv
        })
        
        //junta a duração em uma string do tipo: hh:mm:ss ou mm:ss
        duration = duration[0] ? duration.join(':') : duration.slice(1).join(':')

        document.querySelector(`[id="${data.id}"] label`).textContent = duration

        const img = document.querySelector(`[id="${data.id}"] .div_img`)
        img.style.background = `url("${data.img}")`
        img.style.backgroundSize = "100% 100%"
        img.onclick = () => window.open(`https://www.youtube.com/watch?v=${data.id}`)
    }

    //assincronamente atualiza os detalhes de cada música de acordo com seus metadados
    async function updateDetails() {
        for (const itr in state.videolist) {
            //para cada música: faz a requisição para buscar os detalhes
            
            $.ajax({
                url: `${rotaApi}/details/${state.videolist[itr].id}`,
                type: "GET",
                success: (data) => onSuccesUpdateDetails(data, itr)
            })
        }
    }

    //quando os dados são recebidos das requisições de search, similar e ById
    //essa função atualiza toda a lista de músicas
    function onReceiveData(data) {
        $("#div_listmusic").empty()

        for (let video of data.videos) {
            addVideoButton(video)
        }

        //configurar próximo
        if (data.videos.length > 0) {
            state.nextlist = new Array()
            state.videolist = data.videos
            updateDetails()
        } else {
            state.nextlist = null
        }
    }

    // ---------------------------------------------------------------------------------- funções de requisição

    //realiza uma requisição de acordo com a frase de busca
    function makeRequestSearch(frase) {
        showLoading({ backColor: '#ffffffaa', text: "Buscando..." })

        $.ajax({
            url: `${rotaApi}/search`,
            type: "POST",
            data: { frase },
            success: function (data) {
                onReceiveData(data)
            },
            error: function (data) {
                alert(data.responseJSON ? data.responseJSON.error : "Erro desconhecido")
            },
        }).always(() => {
            hideLoading()
        })
    }

    //realiza uma requisição de acordo com os videos similares ao que está tocando no momento
    function makeRequestSimilar() {
        showLoading({ backColor: '#ffffff00', text: "" })

        $.ajax({
            url: `${rotaApi}/search?similar=${state.video.id}`,
            type: "POST",
            success: function (data) {
                onReceiveData(data)
            },
            error: function (data) {
                alert(data.responseJSON ? data.responseJSON.error : "Erro desconhecido")
            },
        }).always(() => {
            hideLoading()
        })
    }

    //realiza uma requisição de acordo com o id de um vídeo
    function makeRequestById(videoId) {
        showLoading({ backColor: '#ffffffaa', text: "Buscando..." })

        $.ajax({
            url: `${rotaApi}/details/${videoId}`,
            type: "GET",
            success: function (data) {
                onReceiveData({
                    videos: [data]
                })
            },
            error: function (data) {
                alert(data.responseJSON ? data.responseJSON.error : "Erro desconhecido")
            },
        }).always(() => {
            hideLoading()
        })
    }

    // ---------------------------------------------------------------------------------- funções eventos

    //evento do click do botão 'Ok'
    $("#btnCommand").click(() => {
        const inputObj = $("#search_field")

        if (!inputObj.val())
            return alert("Campo de busca em branco")

        if (isVideoURL(inputObj.val())) {
            let videoId = getVideoId(inputObj.val())
            return makeRequestById(videoId)
        }

        makeRequestSearch(inputObj.val())
    })

    $("#div_playpause").click(() => {
        const audio = document.querySelector("audio")

        if (audio.paused) {
            audio.play()
            //mudar background
        } else {
            audio.pause()
            //mudar background
        }
    })

    //quando a página termina de carregar
    window.onload = () => {
        $("#div_creditos_background").css("display", "none")
        //configurar rota
        rotaApi = "{{rota}}"

        //adiciona o botão de voltar
        //addGoBackButton("containerForm", "/")

        document.addEventListener("copy", () => {
            try {
                if (state.video.id === null)
                    return;

                navigator.clipboard.writeText(
                    `${window.location.origin}/youtube/${state.video.id}`
                )
            } catch (e) {
                console.log(e)
            }
        })

        //cria os eventos de teclado
        document.addEventListener("keydown", (event) => {
            if (isLoading()) return;

            if (event.key == "Enter") {
                $("#btnCommand").click()
            } else if (event.key == "ArrowLeft") {
                previousMusic()
            } else if (event.key == "ArrowRight") {
                nextMusic()
            }
        })

        //caso receba um id como parametro, faz a pesquisa
        let videoId = "{{videoId}}"

        if (videoId) {
            makeRequestById(videoId)
        }

        // ------------------------------------------------------ Eventos referentes a track de audio

        //configurar o audio
        const audio = document.querySelector("audio")
        const trackAudio = document.querySelector("#trackAudio")
        const trackVolume = document.querySelector("#trackVolume")
        const labelDuration = document.querySelector("#labelDuration")

        //definir um valor inicial baixo
        trackAudio.value = 0
        trackVolume.value = 0.3

        audio.onended = nextMusic

        trackAudio.addEventListener("input", function () {
            if (isNaN(audio.duration)) return;
            labelDuration.textContent = convertIntToDuration(this.value * audio.duration)
        })

        trackAudio.addEventListener("mousedown", function () {
            if (isNaN(audio.duration)) return;
            this.changing = true
        })

        trackAudio.addEventListener("mouseup", function () {
            if (isNaN(audio.duration)) return;
            audio.currentTime = this.value * audio.duration
            this.changing = false
        })

        trackVolume.addEventListener("input", function () {
            audio.volume = this.value
        })

        audio.addEventListener("timeupdate", function () {
            if (!trackAudio.changing) {
                trackAudio.value = this.currentTime / this.duration
                labelDuration.textContent = convertIntToDuration(this.currentTime)
            }
        })

        audio.addEventListener("loadeddata", function () {
            trackAudio.value = 0
            labelDuration.textContent = convertIntToDuration(0)
        })
    }
</script>

<style>
    /* -------------------- Containers Principais -------------------- */

    body {
        width: 100vw;
        height: 100vh;
    }

    .back_gray {
        background-color: #fff;
    }

    #containerForm {
        display: flex;
        flex-direction: column;
        
        width: 100%;
        height: 100%;

        background-color: #ffffff;
        align-items: center;
    }

    /* -------------------- Barra Superior -------------------- */

    #div_search {
        display: flex;
        flex-direction: row;

        width: 100%;
        height: 8%;

        background-color: #fff;
        
        border-bottom: 1px solid;
        border-color:#eee;

        align-items: center;
        justify-content: center;
    }

    #div_search > input {
        display: flex;

        width: 50%;
        height: 60%;

        outline: 0px;

        text-align: center;
        font-size: larger;

        border-width: 0px;
        border-bottom-width: 1px;
        border-color: #eee;

        color: #333;
    }

    #div_search > input::placeholder {
        color: #999;
    }

    #div_search button {
        height: 60%;
    }

    button {
        display: flex;

        border-width: 0px;
        width: 100%;

        align-items: center;
        justify-content: center;

        color: #333;
        font-size: medium;
    }

    button:hover {
        background-color: rgb(0, 255, 128);
    }

    #btnCommand {
        background-color: rgb(0, 78, 55);
        color: rgb(255, 255, 255);
        width: 10%;
        margin-left: 5px;
        border-radius: 10px;
    }

    #btnCommand:hover {
        background-color: rgb(0, 255, 128);
        color: rgb(0, 0, 0);
    }

    /* -------------------- Parte Central da Página -------------------- */

    .div_itens {
        display: flex;
        flex-direction: row;

        width: 100%;
        height: 84%;

        overflow-y: auto;
    }

    .columnA {
        display: flex;
        flex-direction: column;
        width: 70%;
        height: 100%;

        border-right: 1px solid;
        border-color:#eee;
    }

    .columnB {
        display: flex;
        flex-direction: column;
        width: 30%;
        height: 100%;

        align-items: center;
    }

    /* Classes Gerais */

    .div_lista {
        height: 100%;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .div_list_itens {
        flex-direction: column;

        width: 100%;
        height: 80%;
    }

    /* Coluna Esquerda */

    .columnA #divImg {
        display: flex;
        flex-direction: column;

        width: 100%;
        height: 90%;

        align-items: center;
        justify-content: center;

        border-bottom: 1px solid;
        border-color:#eee;
    }

    .columnA #divImg img {
        display: flex;
        width: 20%;
        height: 40%;
        border-radius: 100%;
    }

    /* Classes Gerais (Itens das Listas) */

    .div_row {
        display: flex;
        flex-direction: row;
        width: 100%;
        
        justify-content: center;
        margin: 2px;

        min-height: 50px;

        border-bottom-width: 1px;
        border-color: #000;
    }

    .div_img {
        display: flex;
        width: 10%;
        align-items: center;

        background-image: url("/loading.png");
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;

        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        width: 15%;

        opacity: 1;
    }

    .div_duration {
        display: flex;
        width: 10%;
        align-items: center;
        justify-content: center;
    }

    .div_download {
        display: flex;
        width: 10%;
        align-items: center;

        background-image: url("/download.png");
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;

        border-top-right-radius: 10px;
        border-bottom-right-radius: 10px;

        opacity: 1;
    }

    .div_img:hover {
        opacity: 0.5;
    }

    .div_download:hover {
        opacity: 0.5;
    }

    /* -------------------- Barra Inferior e Audio -------------------- */

    .div_dialog_section {
        display: flex;
        flex-direction: row;

        width: 100%;
        height: 8%;

        border-top: 1px solid;
        border-color:#eee;
    }
    
    #div_playpause {
        background-image: url("/download.png");
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
    }

    #divTrackAudio {
        display: flex;
        flex-direction: column;

        width: 100%;
        height: 100%;
    }

    #divTrackAudio div {
        display: flex;
        flex-direction: row;

        width: 100%;
        height: 100%;

        align-items: center;
        justify-content: space-between;
    }

    #dialog-title {
        color: #333;
        font-size: medium;
        text-align: center;
        padding-top: 10px;
    }

    #trackAudio {
        width: 80%;
    }

    #trackVolume {
        width: 10%;
    }

    #labelDuration {
        font-size: small;
    }

    #div_download_cur_audio {
        background-image: url("/download.png");
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
    }

    audio {
        display: none;
    }

    progress {
        display:block;
        -webkit-appearance: none;
    }

    progress::-webkit-progress-bar {
        background: #999;
    }

    progress::-moz-progress-bar {  
        background-color: green;
    }

    progress::-webkit-progress-value {
        background: green;
    }
</style>